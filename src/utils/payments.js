// TonWeb is JavaScript SDK (Web and NodeJS) for TON

import { encode as base64Encode } from 'js-base64'
import constants from './constants'
const TonWeb = require('tonweb')

const localStorage = window.localStorage

// For calculations in the blockchain, we use BigNumber (BN.js). https://github.com/indutny/bn.js
// Don't use regular {Number} for coins, etc., it has not enough size and there will be loss of accuracy.

const BN = TonWeb.utils.BN

// Blockchain does not operate with fractional numbers like `0.5`.
// `toNano` function converts TON to nanoton - smallest unit.
// 1 TON = 10^9 nanoton 1 nanoton = 0.000000001 TON
// So 0.5 TON is 500000000 nanoton

const toNano = TonWeb.utils.toNano

const payments = {
  isInited: false,
  init: async () => {
    if (this.isInited) { return }

    this.isInited = true
    const providerUrl = 'https://testnet.toncenter.com/api/v2/jsonRPC' // TON HTTP API url. Use this url for testnet
    const apiKey = '548c689e9e921c80194a974bfcd015ffecba5dbf5493c4685bb93700d618dc7b' // Obtain your API key in https://t.me/tontestnetapibot
    this.tonweb = new TonWeb(new TonWeb.HttpProvider(providerUrl, { apiKey })) // Initialize TON SDK

    // ----------------------------------------------------------------------
    // PARTIES
    // The payment channel is established between two participants A and B.
    // Each has own secret key, which he does not reveal to the other.

    // New secret key can be generated by `tonweb.utils.newSeed()`
    this.tonweb.utils.newSeed() // Uint8Array

    this.clientId = localStorage.get('clientId')
    if (!this.clientId) {
      this.clientId = (new Date()).getTime()
      localStorage.set('clientId', this.clientId)
    }
    const seedClientBase64 = base64Encode(['ton', 'music', 'for', 'contenst', '2022', 'client', this.clientId].join(''))

    const seedClient = TonWeb.utils.base64ToBytes(seedClientBase64) // A's private (secret) key
    this.keyPairClient = this.tonweb.utils.keyPairFromSeed(seedClient) // Obtain key pair (public key and private key)

    const seedService = TonWeb.utils.base64ToBytes(constants.seedServiceBase64) // B's private (secret) key
    this.keyPairService = this.tonweb.utils.keyPairFromSeed(seedService) // Obtain key pair (public key and private key)

    // if you are new to cryptography then the public key is like a login, and the private key is like a password.
    // Login can be shared with anyone, password cannot be shared with anyone.

    // With a key pair, you can create a wallet.
    // Note that this is just an object, we are not deploying anything to the blockchain yet.
    // Transfer some amount of test coins to this wallet address (from your wallet app).
    // To check you can use blockchain explorer https://testnet.tonscan.org/address/<WALLET_ADDRESS>

    this.walletClient = this.tonweb.wallet.create({
      publicKey: this.keyPairClient.publicKey
    })
    this.walletAddressClient = await this.walletClient.getAddress() // address of this wallet in blockchain
    console.log('walletAddressClient = ', this.walletAddressClient.toString(true, true, true))

    this.walletSerice = this.tonweb.wallet.create({
      publicKey: this.keyPairService.publicKey
    })
    this.walletAddressService = await this.walletSerice.getAddress() // address of this wallet in blockchain
    console.log('walletAddressService = ', this.walletAddressService.toString(true, true, true))
  },
  // на вход принимает сколько хочешь внести тонов
  depositFunds: async tonsToDeposit => {
    // ----------------------------------------------------------------------
    // PREPARE PAYMENT CHANNEL

    // The parties agree on the configuration of the payment channel.
    // They share information about the payment channel ID, their public keys, their wallet addresses for withdrawing coins, initial balances.
    // They share this information off-chain, for example via a websocket.

    const channelInitState = {
      balanceA: toNano(tonsToDeposit.toString()), // A's initial balance in Toncoins. Next A will need to make a top-up for this amount
      balanceB: toNano('0'), // B's initial balance in Toncoins. Next B will need to make a top-up for this amount
      seqnoA: new BN(0), // initially 0
      seqnoB: new BN(0) // initially 0
    }

    const channelConfig = {
      channelId: new BN(this.clientId), // Channel ID, for each new channel there must be a new ID
      addressA: this.walletAddressClient, // A's funds will be withdrawn to this wallet address after the channel is closed
      addressB: this.walletAddressService, // B's funds will be withdrawn to this wallet address after the channel is closed
      initBalanceA: channelInitState.balanceA,
      initBalanceB: channelInitState.balanceB
    }

    // Each on their side creates a payment channel object with this configuration

    this.channelClient = this.tonweb.payments.createChannel({
      ...channelConfig,
      isA: true,
      myKeyPair: this.keyPairClient,
      hisPublicKey: this.keyPairService.publicKey
    })
    const channelAddress = await this.channelClient.getAddress() // address of this payment channel smart-contract in blockchain
    console.log('channelAddress=', channelAddress.toString(true, true, true))

    this.channelService = this.tonweb.payments.createChannel({
      ...channelConfig,
      isA: false,
      myKeyPair: this.keyPairService,
      hisPublicKey: this.keyPairClient.publicKey
    })

    if ((await this.channelService.getAddress()).toString() !== channelAddress.toString()) {
      throw new Error('Channels address not same')
    }

    // Interaction with the smart contract of the payment channel is carried out by sending messages from the wallet to it.
    // So let's create helpers for such sends.

    this.fromWalletClient = this.channelClient.fromWallet({
      wallet: this.walletClient,
      secretKey: this.keyPairClient.secretKey
    })

    this.fromWalletService = this.channelService.fromWallet({
      wallet: this.walletSerice,
      secretKey: this.keyPairService.secretKey
    })

    // ----------------------------------------------------------------------
    // NOTE:
    // Further we will interact with the blockchain.
    // After each interaction with the blockchain, we need to wait for execution. In the TON blockchain, this is usually about 5 seconds.
    // In this example, the interaction code happens right after each other - that won't work.
    // To study the example, you can put a `return` after each send.
    // In a real application, you will need to check that the smart contract of the channel has changed
    // (for example, by calling its get-method and checking the `state`) and only then do the following action.

    // ----------------------------------------------------------------------
    // DEPLOY PAYMENT CHANNEL FROM WALLET A

    // Wallet A must have a balance.
    // 0.05 TON is the amount to execute this transaction on the blockchain. The unused portion will be returned.
    // After this action, a smart contract of our payment channel will be created in the blockchain.

    await this.fromWalletClient.deploy().send(toNano('0.05'))

    // To check you can use blockchain explorer https://testnet.tonscan.org/address/<CHANNEL_ADDRESS>
    // We can also call get methods on the channel (it's free) to get its current data.

    async function waitToFinishTransaction () {
      Array.from({ length: 10 }, async (x, i) => {
        await new Promise(resolve => setTimeout(resolve, 1000))

        console.log(await this.channelClient.getChannelState())
        const data = await this.channelClient.getData()
        console.log('data = ', data)
        console.log('balanceA = ', data.balanceA.toString())
        console.log('balanceB = ', data.balanceB.toString())
      })
    }

    await waitToFinishTransaction()

    // TOP UP

    // Now each parties must send their initial balance from the wallet to the channel contract.

    await this.fromWalletClient
      .topUp({ coinsA: channelInitState.balanceA, coinsB: new BN(0) })
      .send(channelInitState.balanceA.add(toNano('0.05'))) // +0.05 TON to network fees

    await waitToFinishTransaction()

    // NO NEED TO TOPUP SERVICE

    // await this.fromWalletService
    //   .topUp({ coinsA: new BN(0), coinsB: channelInitState.balanceB })
    //   .send(channelInitState.balanceB.add(toNano('0.05'))) // +0.05 TON to network fees

    // await waitToFinishTransaction()

    // to check, call the get method - the balances should change

    // INIT

    // After everyone has done top-up, we can initialize the channel from any wallet

    await this.fromWalletClient.init(channelInitState).send(toNano('0.05'))

    await waitToFinishTransaction()

    // to check, call the get method - `state` should change to `TonWeb.payments.PaymentChannel.STATE_OPEN`
  },
  // рассчитывает сколько потрачено трафика в тонах: size * tonsPerKb и переводит тоны в смарт-контракте в сторону TM
  payForListening: async kb => {
    // ----------------------------------------------------------------------
    // FIRST OFFCHAIN TRANSFER - A sends 0.1 TON to B

    // A creates new state - subtracts 0.1 from A's balance, adds 0.1 to B's balance, increases A's seqno by 1

    this.lastChannelState = {
      balanceA: toNano('0.9'),
      balanceB: toNano('2.1'),
      seqnoA: new BN(1),
      seqnoB: new BN(0)
    }

    // A signs this state and send signed state to B (e.g. via websocket)

    const signatureA1 = await this.channelClient.signState(this.lastChannelState)

    // B checks that the state is changed according to the rules, signs this state, send signed state to A (e.g. via websocket)

    if (!(await this.channelService.verifyState(this.lastChannelState, signatureA1))) {
      throw new Error('Invalid A signature')
    }
    const signatureB1 = await this.channelService.signState(this.lastChannelState)

    // ----------------------------------------------------------------------
    // SECOND OFFCHAIN TRANSFER - A sends 0.2 TON to B

    // A creates new state - subtracts 0.2 from A's balance, adds 0.2 to B's balance, increases A's seqno by 1

    this.lastChannelState = {
      balanceA: toNano('0.7'),
      balanceB: toNano('2.3'),
      seqnoA: new BN(2),
      seqnoB: new BN(0)
    }

    // A signs this state and send signed state to B (e.g. via websocket)

    const signatureA2 = await this.channelClient.signState(this.lastChannelState)

    // B checks that the state is changed according to the rules, signs this state, send signed state to A (e.g. via websocket)

    if (!(await this.channelService.verifyState(this.lastChannelState, signatureA2))) {
      throw new Error('Invalid A signature')
    }
    const signatureB2 = await this.channelService.signState(this.lastChannelState)

    // ----------------------------------------------------------------------
    // THIRD OFFCHAIN TRANSFER - B sends 1.1 TON TO A

    // B creates new state - subtracts 1.1 from B's balance, adds 1.1 to A's balance, increases B's seqno by 1

    this.lastChannelState = {
      balanceA: toNano('1.8'),
      balanceB: toNano('1.2'),
      seqnoA: new BN(2),
      seqnoB: new BN(1)
    }

    // B signs this state and send signed state to A (e.g. via websocket)

    const signatureB3 = await this.channelService.signState(this.lastChannelState)

    // A checks that the state is changed according to the rules, signs this state, send signed state to B (e.g. via websocket)

    if (!(await this.channelClient.verifyState(this.lastChannelState, signatureB3))) {
      throw new Error('Invalid B signature')
    }
    const signatureA3 = await this.channelClient.signState(this.lastChannelState)

    // ----------------------------------------------------------------------
    // So they can do this endlessly.
    // Note that a party can make its transfers (from itself to another) asynchronously without waiting for the action of the other side.
    // Party must increase its seqno by 1 for each of its transfers and indicate the last seqno and balance of the other party that it knows.
  },
  // возвращает оставшиеся монеты на кошелек
  withdrawFunds: async () => {
    // ----------------------------------------------------------------------
    // CLOSE PAYMENT CHANNEL

    // The parties decide to end the transfer session.
    // If one of the parties disagrees or is not available, then the payment channel can be emergency terminated using the last signed state.
    // That is why the parties send signed states to each other off-chain.
    // But in our case, they do it by mutual agreement.

    // First B signs closing message with last state, B sends it to A (e.g. via websocket)

    const signatureCloseB = await this.channelService.signClose(this.lastChannelState)

    // A verifies and signs this closing message and include B's signature

    // A sends closing message to blockchain, payments channel smart contract
    // Payment channel smart contract will send funds to participants according to the balances of the sent state.

    if (!(await this.channelClient.verifyClose(this.lastChannelState, signatureCloseB))) {
      throw new Error('Invalid B signature')
    }

    await this.fromWalletClient.close({
      ...this.lastChannelState,
      hisSignature: signatureCloseB
    }).send(toNano('0.05'))
  }
}

// USAGE
// await payments.init()

export default payments
